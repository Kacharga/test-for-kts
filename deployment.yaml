---
apiVersion: v1
kind: Deployment
metadata:
  name: kts-app
spec:
  selector:
    matchLabels:
      app: kts-app
  replicas: 1
  template:
    metadata:
      labels:
        app: kts-app
    spec:
      containers:
      - name: kts-app
        image: <repo-with-kts-app-image>
        resources:
          request: 
            memory: "128Mi"
            cpu: "100m"
          # Лимит указан с запасом так как с на первые запросы приложению может потребоваться больше ресурсов
          limits:
            memory: "128Mi"
            cpu: "200m"
        # Переменные окружения 
        # Ожидается что приложению понадобятся какие-либо переменные/конфиги для работы
        # Поэтому были добавлены обращения к сущностям ConfigMap и Secret
        # secretRef - чувствительные данные/переменные (пароли, токены, логины)
        # сonfigMapRef - специфичные для окружения переменные (хост, порт, бд и т.д.)
        envFrom:
          - secretRef:
              name: kts-app-secret 
          - configMapRef: 
              name: kts-app-config
        ports:
        - containerPort: <Port>
          protocol: TCP
          name: http
        # Так как мы знаем что приложение стартует 5-10 секунд
        # мы даем ему время на инициализацию
        # Первая проверка на готовность принимать соединения произойдет
        # на 5 секунде старта пода, и повторится через 5 секунд после неудачи
        # остальные поля стандартные:
        # Количество секунд ожидания пробы (timeoutSeconds=1)
        # Количество последовательных успешных проверок (successThreshold=1)
        # Количество попыток (failureThreshold=3)
        readinessProbe:
          httpGet: 
            path: <readinessProbe/endpoint>
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5 
        # Для проверки того что приложение работает создаем livenessProbe по аналогии
        livenessProbe:
          httpGet: 
            path: <livenessProbe/endpoint>
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5 
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: kts-app
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: kts-app
  minReplicas: 1
  # Согласно НТ 4 пода достаточно для работы на пиковой нагрузке
  maxReplicas: 4
  metrics:
  - type: Resource
    # Было принято скейлится по CPU, так как приложение 
    # стабильно работает с памятью и использует "ровно" 128M
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
